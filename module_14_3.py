from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

bot = Bot(token='TOKEN')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# kb = InlineKeyboardMarkup(resize_keyboard=True)
kb = InlineKeyboardMarkup(row_width=2)
button1 = InlineKeyboardButton(text='‚öñÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
button2 = InlineKeyboardButton(text='üß™ –§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
button3 = InlineKeyboardButton(text='üõí  –ö—É–ø–∏—Ç—å', callback_data='to_buy')
kb.add(button1, button2)
kb.add(button3)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –≤ –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
# main_menu_kb.add(KeyboardButton(text="–ö—É–ø–∏—Ç—å"))

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
product_kb = InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
product_kb.row(
    InlineKeyboardButton(text="Product1", callback_data='product_buying'),
    InlineKeyboardButton(text="Product2", callback_data='product_buying'),
    InlineKeyboardButton(text="Product3", callback_data='product_buying'),
    InlineKeyboardButton(text="Product4", callback_data='product_buying')
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
repeat_kb = InlineKeyboardMarkup(resize_keyboard=True)
repeat_button1 = InlineKeyboardButton(text='–î–∞', callback_data='calories')
repeat_button2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='stop')
repeat_kb.add(repeat_button1, repeat_button2)

class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
@dp.callback_query_handler(text='formulas')
async def get_formulas(call: types.CallbackQuery):
    await call.message.answer('–§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ –¥–ª—è –º—É–∂—á–∏–Ω:\n10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5;')
    await call.answer()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.', reply_markup=kb)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu_kb)

@dp.callback_query_handler(text='calories')
async def cmd_start(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()

@dp.message_handler(state=UserState.age)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):')
    await UserState.next()

@dp.message_handler(state=UserState.growth)
async def process_growth(message: types.Message, state: FSMContext):
    await state.update_data(growth=int(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):')
    await UserState.next()

@dp.message_handler(state=UserState.weight)
async def process_weight(message: types.Message, state: FSMContext):
    await state.update_data(weight=int(message.text))
    data = await state.get_data()

    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –º—É–∂—á–∏–Ω
    norma = 10 * data['weight'] + 6.25 * data['growth'] - 5 * data['age'] + 5

    await message.answer(f"–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n{round(norma)} –∫–∫–∞–ª")
    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç?"
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç?", reply_markup=repeat_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"

@dp.callback_query_handler(lambda c: c.data == 'to_buy')
async def get_buying_list(call: types.CallbackQuery):
    for i in range(1, 5):
        await call.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: Product{i} | –û–ø–∏—Å–∞–Ω–∏–µ: –æ–ø–∏—Å–∞–Ω–∏–µ {i} | –¶–µ–Ω–∞: {i * 100} —Ä—É–±.')
        with open(f'files/product{i}.jpg', 'rb') as img:  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await call.message.answer_photo(img)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=product_kb)

# Callback —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(lambda c: c.data == 'product_buying')
async def send_confirm_message(call: types.CallbackQuery):
    await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")
    await call.answer()

    # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await call.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
@dp.callback_query_handler(text='stop')
async def stop_interaction(call: types.CallbackQuery):
    await call.message.answer("–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ (–Ω–∞–∂–º–∏) /start.")
    await call.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
